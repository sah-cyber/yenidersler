import sys


class SualCavabOyunu:

    def __init__(self):
        self.dogru_cavab = 0
        self.sef_cavab = 0
        self.cavab_bend = ['A', 'B', 'C']
        self.start()
        print()

    def qrup_1(self):
        print('*' * 50)
        print('1-ci qrup √ºzr…ô Fennler')
        print("""
        1.Kimya
        2.Riyaziyyat
        3.Fizika
        4.Xarici dil
        5.ƒ∞nformatika
        6.Az…ôrbaycan dili\n""")

        print('*' * 50)
        self.kimya()
        self.riaziyyat()
        self.fizika()
        self.azerbaycan()
        self.informatika()
        self.xarici_diller()

    def qrup_2(self):
        print('*' * 50)
        print('2-ci qrup √ºzr…ô Fennler')
        print("""
        1.Coƒürafiya
        2.Riyaziyyat
        3.Tarix
        4.Xarici dil
        5.Az…ôrbaycan dili\n""")
        print('*' * 50)
        self.cografiya()
        self.riaziyyat()
        self.tarix()
        self.azerbaycan()
        self.xarici_diller()

    def qrup_3(self):
        print('*' * 50)
        print('3-c√º qrup √ºzr…ô Fennler')
        print("""
        1.∆èd…ôbiyyat
        2.Riyaziyyat
        3.Tarix
        4.ƒ∞ngilis dili,
        5.Az…ôrbaycan dili\n""")
        print('*' * 50)
        self.edebiyyat()
        self.riaziyyat()
        self.tarix()
        self.azerbaycan()
        self.xarici_diller()

    def qrup_4(self):
        print('*' * 50)
        print('4-c√º qrup √ºzr…ô Fennler')
        print("""
        1.Kimya
        2.Riyaziyyat
        3.Fizika
        4.ƒ∞ngilis dili,
        5.Az…ôrbaycan dili
        6.Biologiya\n""")
        print('*' * 50)
        self.kimya()
        self.riaziyyat()
        self.fizika()
        self.azerbaycan()
        self.bialogiya()
        self.xarici_diller()

    def qrup_5(self):
        print('*' * 50)
        print('5-ci qrup √ºzr…ô Fennler')
        print("""
        1.Az…ôrbaycan dili
        2.Riyaziyyat
        3.Xarici dili\n""")
        print('*' * 50)
        self.azerbaycan()
        self.riaziyyat()
        self.xarici_diller()

    def xarici_diller(self):
        print("Orta Mektebde Hansi Xarici dil tedris olunub")
        print("""Ke√ßiril…ôn Xarici dili qeyd edin
        1.Alman
        2.Fransƒ±z
        3.Rus
        4.ƒ∞ngilis 
        Se√ßiminizi fenn √ºzre reqemle qeyd edin m…ôs: 1 d√ºym…ôsi Alman. 2 d√ºym…ôsi Fransƒ±z v…ô.s""")

        while True:
            self.dil_secimi = input('Dil se√ßiminƒ±n n√∂mr…ôsi: ')

            if self.dil_secimi.isdigit() and self.dil_secimi != "":
                if 1 <= int(self.dil_secimi) <= 4:
                    if self.dil_secimi == '1':
                        self.xarici_alman()
                        break

                    elif self.dil_secimi == '2':
                        self.xarici_fransiz()
                        break
                    elif self.dil_secimi == '3':
                        self.xarici_rus()
                        break
                    elif self.dil_secimi == '4':
                        self.xarici_ingilis()
                        break

                else:
                    print(f"{self.dil_secimi} d√ºzg√ºn se√ßim deyil. Se√ßiminiz 1-d…ôn 4-…ô q…ôd…ôr olmalƒ±dƒ±r.")
            else:
                print(f"{self.dil_secimi} d√ºzg√ºn se√ßim deyil. Se√ßiminizi d√ºzg√ºn edin.")


    def control(self,fenn):
        for k, v in fenn.items():
            print(f"Sual: {k} : {v['sual']}")
            print('Cavablar')
            for cavab in v['cavablar']:
                print(cavab)

            self.cavab_ver = input('Hansi dogru bendir: ').upper()
            while self.cavab_ver not in self.cavab_bend:
                print("Se√ßiminizi d√ºzg√ºn edin. Yalnƒ±z A, B v…ô ya C variantlarƒ±nƒ± se√ß…ô bil…ôrsiniz.")
                self.cavab_ver = input("Hansƒ±nƒ± doƒüru bilirsiniz? (A, B, C): ").upper()

            if self.cavab_ver == v['dogru_cavab'][0]:
                print("Doƒüru cavab! üòä Cavab:{}".format(v['dogru_cavab']))
                self.dogru_cavab += 1

            else:
                print(f"Sehv tapdiniz üòû. Dogru cavab: {v['dogru_cavab']}")
                self.sef_cavab += 1

            print('*' * 60)
        print(f"Doƒüru cavablarƒ±n sayƒ±: {self.dogru_cavab}")
        print(f"S…ôhv cavablarƒ±n sayƒ±: {self.sef_cavab}")
        self.kecid()


    def kecid(self):
        try:
            self.kecid_bal = (self.dogru_cavab *5)- (self.sef_cavab*2)
            print('Sizin ke√ßid balƒ±nƒ±z',self.kecid_bal)
            if self.kecid_bal >= 90:
                qiymet = 'A'
            elif self.kecid_bal >= 80:
                qiymet = 'B'
            elif self.kecid_bal >= 70:
                qiymet = 'C'
            elif self.kecid_bal >= 60:
                qiymet = 'D'
            else:
                qiymet = 'F'  # Ke√ßm…ôdikd…ô 'F' verilir

            print(f"√úmumi balƒ±nƒ±z: {self.kecid_bal} bal - Qiym…ôt: {qiymet}")
        except (ZeroDivisionError, OverflowError):
            print('Sizin s…ôhfiniz yoxdur')

    def xarici_rus(self):
        print('#' * 50)
        print('--------------RUS---------------')

        self.rus_dict_questions = {
            1: {
                "sual": "–°—Ç–æ–ª–∏—Ü–∞ –†–æ—Å—Å–∏–∏?",
                "cavablar": ["A) –ú–æ—Å–∫–≤–∞", "B) –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "C) –ö–∞–∑–∞–Ω—å"],
                "dogru_cavab": "A) –ú–æ—Å–∫–≤–∞"
            },
            2: {
                "sual": "–ö–∞–∫–æ–µ —Å–ª–æ–≤–æ —è–≤–ª—è–µ—Ç—Å—è –≥–ª–∞–≥–æ–ª–æ–º?",
                "cavablar": ["A) –ë–µ–≥–∞—Ç—å", "B) –ë—ã—Å—Ç—Ä–æ", "C) –£–º–Ω—ã–π"],
                "dogru_cavab": "A) –ë–µ–≥–∞—Ç—å"
            },
            3: {
                "sual": "–ö–∞–∫–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–¥–µ—Ç –ø–æ—Å–ª–µ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞?",
                "cavablar": ["A) –í—Ç–æ—Ä–Ω–∏–∫", "B) –°—Ä–µ–¥–∞", "C) –ß–µ—Ç–≤–µ—Ä–≥"],
                "dogru_cavab": "A) –í—Ç–æ—Ä–Ω–∏–∫"
            },
            4: {
                "sual": "–ö–∞–∫–æ–µ —Å–ª–æ–≤–æ —è–≤–ª—è–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º?",
                "cavablar": ["A) –ö–Ω–∏–≥–∞", "B) –ë—ã—Å—Ç—Ä–æ", "C) –ü–ª–∞–≤–∞—Ç—å"],
                "dogru_cavab": "A) –ö–Ω–∏–≥–∞"
            },
            5: {
                "sual": "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –æ–∫–µ–∞–Ω –Ω–∞ –ó–µ–º–ª–µ?",
                "cavablar": ["A) –ê—Ç–ª–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –æ–∫–µ–∞–Ω", "B) –¢–∏—Ö–∏–π –æ–∫–µ–∞–Ω", "C) –ò–Ω–¥–∏–π—Å–∫–∏–π –æ–∫–µ–∞–Ω"],
                "dogru_cavab": "B) –¢–∏—Ö–∏–π –æ–∫–µ–∞–Ω"
            },
            6: {
                "sual": "–°–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤ –≤ –≥–æ–¥—É?",
                "cavablar": ["A) 10", "B) 12", "C) 14"],
                "dogru_cavab": "B) 12"
            },
            7: {
                "sual": "–ö–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç —Ç–∞–±–ª–∏—Ü—ã –ú–µ–Ω–¥–µ–ª–µ–µ–≤–∞ –∏–º–µ–µ—Ç —Å–∏–º–≤–æ–ª 'O'?",
                "cavablar": ["A) –ó–æ–ª–æ—Ç–æ", "B) –í–æ–¥–æ—Ä–æ–¥", "C) –ö–∏—Å–ª–æ—Ä–æ–¥"],
                "dogru_cavab": "C) –ö–∏—Å–ª–æ—Ä–æ–¥"
            },
            8: {
                "sual": "–ö–∞–∫–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ –∫ –°–æ–ª–Ω—Ü—É?",
                "cavablar": ["A) –ó–µ–º–ª—è", "B) –í–µ–Ω–µ—Ä–∞", "C) –ú–µ—Ä–∫—É—Ä–∏–π"],
                "dogru_cavab": "C) –ú–µ—Ä–∫—É—Ä–∏–π"
            },
            9: {
                "sual": "–ö–∞–∫–æ–µ —á–∏—Å–ª–æ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º?",
                "cavablar": ["A) 15", "B) 7", "C) 20"],
                "dogru_cavab": "B) 7"
            },
            10: {
                "sual": "–ö–∞–∫–æ–π —Ü–≤–µ—Ç —Ñ–ª–∞–≥–∞ –†–æ—Å—Å–∏–∏?",
                "cavablar": ["A) –ó–µ–ª–µ–Ω—ã–π, –±–µ–ª—ã–π, –∫—Ä–∞—Å–Ω—ã–π", "B) –ë–µ–ª—ã–π, —Å–∏–Ω–∏–π, –∫—Ä–∞—Å–Ω—ã–π", "C) –ñ–µ–ª—Ç—ã–π, —Å–∏–Ω–∏–π, –∫—Ä–∞—Å–Ω—ã–π"],
                "dogru_cavab": "B) –ë–µ–ª—ã–π, —Å–∏–Ω–∏–π, –∫—Ä–∞—Å–Ω—ã–π"
            },
            11: {
                "sual": "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è –≤–æ–¥—ã –≤ –ø–∞—Ä?",
                "cavablar": ["A) –ö–æ–Ω–¥–µ–Ω—Å–∞—Ü–∏—è", "B) –ò—Å–ø–∞—Ä–µ–Ω–∏–µ", "C) –ó–∞–º–µ—Ä–∑–∞–Ω–∏–µ"],
                "dogru_cavab": "B) –ò—Å–ø–∞—Ä–µ–Ω–∏–µ"
            },
            12: {
                "sual": "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü –≥–æ–¥–∞?",
                "cavablar": ["A) –Ø–Ω–≤–∞—Ä—å", "B) –§–µ–≤—Ä–∞–ª—å", "C) –î–µ–∫–∞–±—Ä—å"],
                "dogru_cavab": "A) –Ø–Ω–≤–∞—Ä—å"
            },
            13: {
                "sual": "–ö–∞–∫–∞—è —Ä–µ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è —Å–∞–º–æ–π –¥–ª–∏–Ω–Ω–æ–π –≤ –º–∏—Ä–µ?",
                "cavablar": ["A) –ù–∏–ª", "B) –ê–º–∞–∑–æ–Ω–∫–∞", "C) –Ø–Ω—Ü–∑—ã"],
                "dogru_cavab": "A) –ù–∏–ª"
            },
            14: {
                "sual": "–ö–∞–∫–æ–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ —è–≤–ª—è–µ—Ç—Å—è —Å–∞–º—ã–º –±–æ–ª—å—à–∏–º –ø–æ –ø–ª–æ—â–∞–¥–∏?",
                "cavablar": ["A) –°–®–ê", "B) –ö–∏—Ç–∞–π", "C) –†–æ—Å—Å–∏—è"],
                "dogru_cavab": "C) –†–æ—Å—Å–∏—è"
            },
            15: {
                "sual": "–ö–∞–∫–æ–π –º–µ—Ç–∞–ª–ª –∏–º–µ–µ—Ç —Å–∏–º–≤–æ–ª 'Fe'?",
                "cavablar": ["A) –ó–æ–ª–æ—Ç–æ", "B) –ñ–µ–ª–µ–∑–æ", "C) –ú–µ–¥—å"],
                "dogru_cavab": "B) –ñ–µ–ª–µ–∑–æ"
            }
        }
        self.control(self.rus_dict_questions)

    def xarici_fransiz(self):
        print('#' * 50)
        print('--------------FRANSIZ---------------')

        self.fransiz_dict_questions = {
            1: {
                "sual": "Quelle est la capitale de la France ?",
                "cavablar": ["A) Paris", "B) Marseille", "C) Lyon"],
                "dogru_cavab": "A) Paris"
            },
            2: {
                "sual": "Quel est le plus grand oc√©an du monde ?",
                "cavablar": ["A) Oc√©an Atlantique", "B) Oc√©an Pacifique", "C) Oc√©an Indien"],
                "dogru_cavab": "B) Oc√©an Pacifique"
            },
            3: {
                "sual": "Combien de mois dans une ann√©e ?",
                "cavablar": ["A) 10", "B) 12", "C) 14"],
                "dogru_cavab": "B) 12"
            },
            4: {
                "sual": "Quelle est la langue officielle de la France ?",
                "cavablar": ["A) Espagnol", "B) Anglais", "C) Fran√ßais"],
                "dogru_cavab": "C) Fran√ßais"
            },
            5: {
                "sual": "Quel est le plus grand pays du monde ?",
                "cavablar": ["A) Chine", "B) Russie", "C) √âtats-Unis"],
                "dogru_cavab": "B) Russie"
            },
            6: {
                "sual": "Qui a √©crit 'Les Mis√©rables' ?",
                "cavablar": ["A) Victor Hugo", "B) Emile Zola", "C) Marcel Proust"],
                "dogru_cavab": "A) Victor Hugo"
            },
            7: {
                "sual": "Quel est le symbole chimique de l'eau ?",
                "cavablar": ["A) O2", "B) H2O", "C) CO2"],
                "dogru_cavab": "B) H2O"
            },
            8: {
                "sual": "Combien de continents y a-t-il sur Terre ?",
                "cavablar": ["A) 5", "B) 6", "C) 7"],
                "dogru_cavab": "C) 7"
            },
            9: {
                "sual": "Quel est le plus grand fleuve de France ?",
                "cavablar": ["A) La Seine", "B) La Loire", "C) Le Rh√¥ne"],
                "dogru_cavab": "B) La Loire"
            },
            10: {
                "sual": "Quelle est la monnaie utilis√©e en France ?",
                "cavablar": ["A) Euro", "B) Dollar", "C) Livre"],
                "dogru_cavab": "A) Euro"
            },
            11: {
                "sual": "Quel est le plus grand d√©sert du monde ?",
                "cavablar": ["A) Le d√©sert du Sahara", "B) Le d√©sert de Gobi", "C) L'Antarctique"],
                "dogru_cavab": "C) L'Antarctique"
            },
            12: {
                "sual": "Quel est le plus grand animal terrestre ?",
                "cavablar": ["A) L'√©l√©phant", "B) La baleine bleue", "C) Le rhinoc√©ros"],
                "dogru_cavab": "A) L'√©l√©phant"
            },
            13: {
                "sual": "Combien de pays composent l'Union Europ√©enne ?",
                "cavablar": ["A) 27", "B) 28", "C) 30"],
                "dogru_cavab": "A) 27"
            },
            14: {
                "sual": "Qui a peint la Joconde ?",
                "cavablar": ["A) Pablo Picasso", "B) Claude Monet", "C) L√©onard de Vinci"],
                "dogru_cavab": "C) L√©onard de Vinci"
            },
            15: {
                "sual": "Quel est l'√©l√©ment chimique avec le symbole 'Fe' ?",
                "cavablar": ["A) Fer", "B) Argent", "C) Or"],
                "dogru_cavab": "A) Fer"
            }
        }
        self.control(self.fransiz_dict_questions)

    def xarici_alman(self):
        print('#' * 50)
        print('--------------ALMAN---------------')
        self.alman_dict_questions = {
            1: {
                "sual": "Was ist die Hauptstadt von Deutschland?",
                "cavablar": ["A) Berlin", "B) M√ºnchen", "C) Frankfurt"],
                "dogru_cavab": "A) Berlin"
            },
            2: {
                "sual": "Welches ist der l√§ngste Fluss in Deutschland?",
                "cavablar": ["A) Rhein", "B) Elbe", "C) Donau"],
                "dogru_cavab": "A) Rhein"
            },
            3: {
                "sual": "Wie viele Bundesl√§nder gibt es in Deutschland?",
                "cavablar": ["A) 12", "B) 16", "C) 18"],
                "dogru_cavab": "B) 16"
            },
            4: {
                "sual": "Wer war der erste Bundeskanzler der Bundesrepublik Deutschland?",
                "cavablar": ["A) Willy Brandt", "B) Konrad Adenauer", "C) Angela Merkel"],
                "dogru_cavab": "B) Konrad Adenauer"
            },
            5: {
                "sual": "Welches Land grenzt nicht an Deutschland?",
                "cavablar": ["A) Frankreich", "B) Polen", "C) Italien"],
                "dogru_cavab": "C) Italien"
            },
            6: {
                "sual": "Welches Bundesland hat die gr√∂√üte Fl√§che?",
                "cavablar": ["A) Bayern", "B) Nordrhein-Westfalen", "C) Niedersachsen"],
                "dogru_cavab": "A) Bayern"
            },
            7: {
                "sual": "Welches ist das gr√∂√üte Land Europas?",
                "cavablar": ["A) Frankreich", "B) Deutschland", "C) Russland"],
                "dogru_cavab": "C) Russland"
            },
            8: {
                "sual": "Wie viele Sterne befinden sich auf der Flagge der Europ√§ischen Union?",
                "cavablar": ["A) 12", "B) 15", "C) 10"],
                "dogru_cavab": "A) 12"
            },
            9: {
                "sual": "Welche Stadt ist die gr√∂√üte in Deutschland?",
                "cavablar": ["A) Berlin", "B) M√ºnchen", "C) Hamburg"],
                "dogru_cavab": "A) Berlin"
            },
            10: {
                "sual": "Wer ist der Autor von 'Faust'?",
                "cavablar": ["A) Johann Wolfgang von Goethe", "B) Friedrich Schiller", "C) Thomas Mann"],
                "dogru_cavab": "A) Johann Wolfgang von Goethe"
            },
            11: {
                "sual": "Welches Tier ist das Wappentier von Deutschland?",
                "cavablar": ["A) Adler", "B) L√∂we", "C) B√§r"],
                "dogru_cavab": "A) Adler"
            },
            12: {
                "sual": "Welches war das erste Bundesland, das der Bundesrepublik Deutschland beitrat?",
                "cavablar": ["A) Hessen", "B) Bayern", "C) Baden-W√ºrttemberg"],
                "dogru_cavab": "A) Hessen"
            },
            13: {
                "sual": "Welche deutsche Stadt ist ber√ºhmt f√ºr ihre Erfinder und das Automobil?",
                "cavablar": ["A) Stuttgart", "B) Frankfurt", "C) K√∂ln"],
                "dogru_cavab": "A) Stuttgart"
            },
            14: {
                "sual": "Wie hei√üt der deutsche Nationalfeiertag?",
                "cavablar": ["A) Tag der Deutschen Einheit", "B) Oktoberfest", "C) Weihnachten"],
                "dogru_cavab": "A) Tag der Deutschen Einheit"
            },
            15: {
                "sual": "Wie hei√üt der bekannteste deutsche Komponist, der die 'Ode an die Freude' komponierte?",
                "cavablar": ["A) Johann Sebastian Bach", "B) Ludwig van Beethoven", "C) Wolfgang Amadeus Mozart"],
                "dogru_cavab": "B) Ludwig van Beethoven"
            }
        }
        self.control(self.alman_dict_questions)

    def xarici_ingilis(self):
        print('#' * 50)
        print('--------------ƒ∞NGƒ∞Lƒ∞S---------------')

        self.english_dict_questions_azerbaijani = {
            1: {
                "sual": "ƒ∞ngilt…ôr…ônin paytaxtƒ± hansƒ±dƒ±r?",
                "cavablar": ["A) London", "B) Paris", "C) Berlin"],
                "dogru_cavab": "A) London"
            },
            2: {
                "sual": "'Foot' s√∂z√ºn√ºn √ßoxluq formasƒ± n…ôdir?",
                "cavablar": ["A) Foots", "B) Feets", "C) Feet"],
                "dogru_cavab": "C) Feet"
            },
            3: {
                "sual": "A≈üaƒüƒ±dakilerden hansƒ±dƒ±r fel?",
                "cavablar": ["A) Run", "B) Happiness", "C) Quickly"],
                "dogru_cavab": "A) Run"
            },
            4: {
                "sual": "A≈üaƒüƒ±dakilerden hansƒ±sƒ± m√ºlkiyy…ôt zamiridir?",
                "cavablar": ["A) Her", "B) She", "C) Hers"],
                "dogru_cavab": "C) Hers"
            },
            5: {
                "sual": "'Go' s√∂z√ºn√ºn ke√ßmi≈ü zaman formasƒ± hansƒ±dƒ±r?",
                "cavablar": ["A) Went", "B) Gone", "C) Going"],
                "dogru_cavab": "A) Went"
            },
            6: {
                "sual": "A≈üaƒüƒ±dakilerden hansƒ±sƒ± sif…ôtdir?",
                "cavablar": ["A) Beautiful", "B) Running", "C) Quickly"],
                "dogru_cavab": "A) Beautiful"
            },
            7: {
                "sual": "'They ______ at home.' c√ºml…ôsind…ô doƒüru fel formasƒ± n…ôdir?",
                "cavablar": ["A) Are", "B) Is", "C) Am"],
                "dogru_cavab": "A) Are"
            },
            8: {
                "sual": "A≈üaƒüƒ±dakilerden hansƒ±sƒ± 'happy' s√∂z√ºn√ºn sinonimidir?",
                "cavablar": ["A) Sad", "B) Joyful", "C) Angry"],
                "dogru_cavab": "B) Joyful"
            },
            9: {
                "sual": "'Big' s√∂z√ºn√ºn ziddi hansƒ±dƒ±r?",
                "cavablar": ["A) Small", "B) Tall", "C) Heavy"],
                "dogru_cavab": "A) Small"
            },
            10: {
                "sual": "'She ______ to the store' c√ºml…ôsinin doƒüru formasƒ± hansƒ±dƒ±r?",
                "cavablar": ["A) Goes", "B) Going", "C) Go"],
                "dogru_cavab": "A) Goes"
            },
            11: {
                "sual": "'The cat sleeps on the mat' c√ºml…ôsind…ô subyekt n…ôdir?",
                "cavablar": ["A) Sleeps", "B) The mat", "C) The cat"],
                "dogru_cavab": "C) The cat"
            },
            12: {
                "sual": "A≈üaƒüƒ±dakilerden hansƒ± baƒülayƒ±cƒ± s√∂z√ºd√ºr?",
                "cavablar": ["A) But", "B) Quickly", "C) Walk"],
                "dogru_cavab": "A) But"
            },
            13: {
                "sual": "'Child' s√∂z√ºn√ºn doƒüru √ßoxluq formasƒ± n…ôdir?",
                "cavablar": ["A) Childs", "B) Children", "C) Childes"],
                "dogru_cavab": "B) Children"
            },
            14: {
                "sual": "A≈üaƒüƒ±dakilerden hansƒ± g…ôl…ôc…ôk zaman formasƒ±dƒ±r?",
                "cavablar": ["A) She will go to the store.", "B) She goes to the store.", "C) She went to the store."],
                "dogru_cavab": "A) She will go to the store."
            },
            15: {
                "sual": "A≈üaƒüƒ±dakilerden hansƒ± qo≈üma s√∂z√ºd√ºr?",
                "cavablar": ["A) But", "B) Quickly", "C) Walk"],
                "dogru_cavab": "A) But"
            }
        }

        self.control(self.english_dict_questions_azerbaijani)



    def kimya(self):
        print('#' * 50)
        print('--------------Kƒ∞MYA---------------')
        self.kimya_suallari = {
            1: {
                "sual": "Kimyada atomlarƒ±n …ôn ki√ßik vahidi hansƒ± madd…ôy…ô aiddir?",
                "cavablar": ["A) Atom", "B) Molekul", "C) Ion"],
                "dogru_cavab": "A) Atom"
            },
            2: {
                "sual": "Hidrogenin kimy…ôvi simvolu hansƒ±dƒ±r?",
                "cavablar": ["A) H", "B) He", "C) O"],
                "dogru_cavab": "A) H"
            },
            3: {
                "sual": "Su molekulunun (H2O) t…ôrkibind…ô ne√ß…ô oksigen atomu vardƒ±r?",
                "cavablar": ["A) 1", "B) 2", "C) 3"],
                "dogru_cavab": "A) 1"
            },
            4: {
                "sual": "A≈üaƒüƒ±dakƒ± madd…ôl…ôrd…ôn hansƒ± asidik xarakter…ô malikdir?",
                "cavablar": ["A) Su", "B) Sirk…ô", "C) Soda"],
                "dogru_cavab": "B) Sirk…ô"
            },
            5: {
                "sual": "Kimy…ôvi reaksiyalarda enerji d…ôyi≈üm…ôsini √∂l√ß…ôn cihazƒ±n adƒ± n…ôdir?",
                "cavablar": ["A) Termometr", "B) Kalorimetr", "C) Barometr"],
                "dogru_cavab": "B) Kalorimetr"
            },
            6: {
                "sual": "Hidrogenl…ô reaksiya ver…ôr…ôk su meydana g…ôtir…ôn metal hansƒ± metal olacaq?",
                "cavablar": ["A) K√ºk√ºrd", "B) Al√ºminium", "C) Natrium"],
                "dogru_cavab": "C) Natrium"
            },
            7: {
                "sual": "A≈üaƒüƒ±dakƒ± madd…ôl…ôrd…ôn hansƒ± birl…ô≈üm…ôdir?",
                "cavablar": ["A) Oksigen", "B) Helyum", "C) Su (H2O)"],
                "dogru_cavab": "C) Su (H2O)"
            },
            8: {
                "sual": "B√ºt√ºn atomlarƒ±n t…ôrkibind…ô olan …ôsas hiss…ôcik hansƒ±dƒ±r?",
                "cavablar": ["A) Proton", "B) Elektron", "C) Neutron"],
                "dogru_cavab": "B) Elektron"
            },
            9: {
                "sual": "Kimy…ôvi elementl…ôrin yerl…ô≈üdiyi c…ôdv…ôlin adƒ± n…ôdir?",
                "cavablar": ["A) D√∂vri C…ôdv…ôl", "B) Kimy…ôvi C…ôdv…ôl", "C) Elementl…ôr C…ôdv…ôli"],
                "dogru_cavab": "A) D√∂vri C…ôdv…ôl"
            },
            10: {
                "sual": "Hansƒ± madd…ô qaz halƒ±nda sƒ±xƒ±la bil…ôr?",
                "cavablar": ["A) Su", "B) Oksigen", "C) D…ômir"],
                "dogru_cavab": "B) Oksigen"
            },
            11: {
                "sual": "Qazlarƒ±n h…ôcmi il…ô t…ôzyiqi arasƒ±ndakƒ± …ôlaq…ôni g√∂st…ôr…ôn qanun hansƒ±dƒ±r?",
                "cavablar": ["A) Boyle qanunu", "B) Charles qanunu", "C) Avogadro qanunu"],
                "dogru_cavab": "A) Boyle qanunu"
            },
            12: {
                "sual": "Kimyada bir madd…ônin suya olan h…ôllini √∂l√ßm…ôk √º√ß√ºn istifad…ô olunan cihaz hansƒ±dƒ±r?",
                "cavablar": ["A) Refraktometr", "B) Spektrofotometr", "C) pH-metr"],
                "dogru_cavab": "C) pH-metr"
            },
            13: {
                "sual": "A≈üaƒüƒ±dakilerden hangi bir elementin ismi doƒüru yazƒ±lmƒ±≈ütƒ±r?",
                "cavablar": ["A) K√ºk√ºrdl…ô", "B) Karbon", "C) Karbona"],
                "dogru_cavab": "B) Karbon"
            },
            14: {
                "sual": "Kalsium karbonat (CaCO3) hansƒ± madd…ôl…ôrd…ôn …ôm…ôl…ô g…ôlir?",
                "cavablar": ["A) Kalsium v…ô karbon dioksid", "B) Kalsium v…ô oksigen", "C) Kalsium, karbon v…ô oksigen"],
                "dogru_cavab": "C) Kalsium, karbon v…ô oksigen"
            },
            15: {
                "sual": "Kimyada madd…ôl…ôrin oksidl…ô≈üm…ôsi n…ôyi bildirir?",
                "cavablar": ["A) Elektron verm…ôsi", "B) Elektron q…ôbul etm…ôsi", "C) Molekul halƒ±nda m√∂vcud olmasƒ±"],
                "dogru_cavab": "A) Elektron verm…ôsi"
            }
        }

        self.control(self.kimya_suallari)

    def riaziyyat(self):
        print('#' * 50)
        print('--------------Rƒ∞AZƒ∞YYAT---------------')
        self.riyaziyyat_suallari = {
            1: {
                "sual": "Bir √º√ßbucaƒüƒ±n i√ß bucaqlarƒ±nƒ±n c…ômi n…ô q…ôd…ôrdir?",
                "cavablar": ["A) 180¬∞", "B) 360¬∞", "C) 90¬∞"],
                "dogru_cavab": "A) 180¬∞"
            },
            2: {
                "sual": "Bir …ôd…ôdi 7 il…ô b√∂l…ônd…ô qalan 3 qalƒ±rsa, h…ômin …ôd…ôdin b√∂l…ôni n…ôdir?",
                "cavablar": ["A) 7", "B) 3", "C) 6"],
                "dogru_cavab": "A) 7"
            },
            3: {
                "sual": "Bir d√ºzbucaqlƒ± √º√ßbucaƒüƒ±n hipotenuzasƒ±nƒ±n uzunluƒüu 10 sm, bir ayaƒüƒ±nƒ±n uzunluƒüu is…ô 6 sm-dir. ƒ∞kinci ayaƒüƒ±nƒ±n uzunluƒüunu tapƒ±n.",
                "cavablar": ["A) 8 sm", "B) 7 sm", "C) 9 sm"],
                "dogru_cavab": "B) 8 sm"
            },
            4: {
                "sual": "5x + 3 = 18 t…ônliyini h…ôll edin.",
                "cavablar": ["A) x = 3", "B) x = 4", "C) x = 2"],
                "dogru_cavab": "A) x = 3"
            },
            5: {
                "sual": "Bir dair…ônin radiusu 7 sm-dir. Dair…ônin sah…ôsini tapƒ±n. (œÄ ‚âà 3.14)",
                "cavablar": ["A) 153.94 sm¬≤", "B) 49 sm¬≤", "C) 25 sm¬≤"],
                "dogru_cavab": "A) 153.94 sm¬≤"
            },
            6: {
                "sual": "Bir kvadratƒ±n t…ôr…ôfi 8 sm-dir. Kvadratƒ±n perimetri n…ô q…ôd…ôrdir?",
                "cavablar": ["A) 32 sm", "B) 16 sm", "C) 64 sm"],
                "dogru_cavab": "A) 32 sm"
            },
            7: {
                "sual": "Bir d√ºzbucaqlƒ± paralelepipedin h…ôcmi 360 sm¬≥, eni 6 sm, h√ºnd√ºrl√ºy√º is…ô 5 sm-dir. Uzunluƒüu tapƒ±n.",
                "cavablar": ["A) 12 sm", "B) 10 sm", "C) 15 sm"],
                "dogru_cavab": "B) 12 sm"
            },
            8: {
                "sual": "Bir √º√ßbucaƒüƒ±n sah…ôsi 30 sm¬≤, h√ºnd√ºrl√ºy√º 6 sm-dir. √ú√ßbucaƒüƒ±n …ôsasƒ±nƒ± tapƒ±n.",
                "cavablar": ["A) 5 sm", "B) 10 sm", "C) 6 sm"],
                "dogru_cavab": "B) 10 sm"
            },
            9: {
                "sual": "Bir k…ôsirin …ôd…ôdi 12, m…ôxr…ôci is…ô 8-dir. K…ôsirin sad…ô halƒ± nec…ô olacaq?",
                "cavablar": ["A) 3/2", "B) 4/3", "C) 2/3"],
                "dogru_cavab": "A) 3/2"
            },
            10: {
                "sual": "x¬≤ - 5x + 6 = 0 t…ônliyini h…ôll edin.",
                "cavablar": ["A) x = 2, x = 3", "B) x = 1, x = 6", "C) x = 0, x = 6"],
                "dogru_cavab": "A) x = 2, x = 3"
            },
            11: {
                "sual": "Bir d√ºz x…ôttin t…ôrsini tapmaq √º√ß√ºn hansƒ± …ôm…ôliyyatƒ± aparmaq lazƒ±mdƒ±r?",
                "cavablar": ["A) Toplama", "B) √áƒ±xma", "C) B√∂lm…ô"],
                "dogru_cavab": "C) B√∂lm…ô"
            },
            12: {
                "sual": "Bir c…ôbrik ifad…ônin q√ºvv…ôtind…ôki …ôsas nec…ô ifad…ô edilir?",
                "cavablar": ["A) T…ôsad√ºfi …ôd…ôd", "B) ƒ∞fad…ônin baza …ôd…ôdidir", "C) ƒ∞fad…ônin n…ôtic…ôsidir"],
                "dogru_cavab": "B) ƒ∞fad…ônin baza …ôd…ôdidir"
            },
            13: {
                "sual": "Bir …ôd…ôdin y√ºzd…ô 20-si 50-dir. ∆èd…ôdin √∂z√º n…ô q…ôd…ôrdir?",
                "cavablar": ["A) 250", "B) 200", "C) 100"],
                "dogru_cavab": "B) 200"
            },
            14: {
                "sual": "Bir kvadratƒ±n sah…ôsi 64 sm¬≤-dir. Kvadratƒ±n t…ôr…ôfi n…ô q…ôd…ôrdir?",
                "cavablar": ["A) 8 sm", "B) 4 sm", "C) 16 sm"],
                "dogru_cavab": "A) 8 sm"
            },
            15: {
                "sual": "Bir c…ôm 50-dir. ∆èg…ôr birinci …ôd…ôd 30, ikinci …ôd…ôd is…ô 20-dirs…ô, bu iki …ôd…ôdin f…ôrqi n…ô q…ôd…ôrdir?",
                "cavablar": ["A) 10", "B) 5", "C) 20"],
                "dogru_cavab": "A) 10"
            }
        }

        self.control(self.riyaziyyat_suallari)

    def fizika(self):
        print('#' * 50)
        print('--------------Fƒ∞Zƒ∞KA---------------')
        self.fizika_suallari = {
            1: {
                "sual": "H…ôr…ôk…ôt n…ôdir?",
                "cavablar": ["A) Cismin zamanla yer d…ôyi≈üm…ôsi", "B) Cismin s√ºr…ôtinin d…ôyi≈üm…ôsi",
                             "C) Cismin k√ºtl…ôsinin d…ôyi≈üm…ôsi"],
                "dogru_cavab": "A) Cismin zamanla yer d…ôyi≈üm…ôsi"
            },
            2: {
                "sual": "Newton-un birinci qanunu n…ôyi izah edir?",
                "cavablar": ["A) Q√ºvv…ô olmadan h…ôr…ôk…ôt ed…ôn cism sabit s√ºr…ôtini saxlayƒ±r",
                             "B) Q√ºvv…ô h…ôr…ôk…ôt ed…ôn cismi dayandƒ±rƒ±r", "C) Cismin h…ôr…ôk…ôtini yalnƒ±z s√ºr…ôt t…ôsir edir"],
                "dogru_cavab": "A) Q√ºvv…ô olmadan h…ôr…ôk…ôt ed…ôn cism sabit s√ºr…ôtini saxlayƒ±r"
            },
            3: {
                "sual": "Kinetik enerji nec…ô hesablanƒ±r?",
                "cavablar": ["A) E_k = m * v", "B) E_k = 1/2 * m * v^2", "C) E_k = m * g * h"],
                "dogru_cavab": "B) E_k = 1/2 * m * v^2"
            },
            4: {
                "sual": "Elektrik c…ôr…ôyanƒ±nƒ±n istiqam…ôti nec…ô m√º…ôyy…ôn olunur?",
                "cavablar": ["A) Elektronlarƒ±n h…ôr…ôk…ôt istiqam…ôtin…ô g√∂r…ô",
                             "B) C…ôr…ôyanƒ±n ke√ßiricil…ôrinin h…ôr…ôk…ôtin…ô g√∂r…ô", "C) Y√ºkl…ôrin h…ôr…ôk…ôt istiqam…ôtin…ô g√∂r…ô"],
                "dogru_cavab": "C) Y√ºkl…ôrin h…ôr…ôk…ôt istiqam…ôtin…ô g√∂r…ô"
            },
            5: {
                "sual": "Bir cismin s√ºr…ôtini artƒ±rmaq √º√ß√ºn hansƒ± amil artƒ±rƒ±lmalƒ±dƒ±r?",
                "cavablar": ["A) K√ºtl…ô", "B) Q√ºvv…ô", "C) H…ôcm"],
                "dogru_cavab": "B) Q√ºvv…ô"
            },
            6: {
                "sual": "Bir cism…ô t…ôtbiq edil…ôn q√ºvv…ô n…ôyi d…ôyi≈üdirir?",
                "cavablar": ["A) S√ºr…ôtini", "B) K√ºtl…ôsini", "C) H…ôcmini"],
                "dogru_cavab": "A) S√ºr…ôtini"
            },
            7: {
                "sual": "Fizikada i≈ü nec…ô √∂l√ß√ºl√ºr?",
                "cavablar": ["A) Enerji", "B) G√ºc", "C) G√ºc * zaman"],
                "dogru_cavab": "A) Enerji"
            },
            8: {
                "sual": "Bir cismi yer…ô atdƒ±qda hansƒ± enerji artƒ±r?",
                "cavablar": ["A) Kinetik enerji", "B) Potensial enerji", "C) ƒ∞stilik enerjisi"],
                "dogru_cavab": "B) Potensial enerji"
            },
            9: {
                "sual": "Bir madd…ônin sƒ±xlƒ±ƒüƒ±nƒ± nec…ô hesablayƒ±rƒ±q?",
                "cavablar": ["A) H…ôcm / K√ºtl…ô", "B) K√ºtl…ô / H…ôcm", "C) K√ºtl…ô * H…ôcm"],
                "dogru_cavab": "B) K√ºtl…ô / H…ôcm"
            },
            10: {
                "sual": "Bir cismin s√ºr…ôtini nec…ô √∂l√ß√ºr√ºk?",
                "cavablar": ["A) Termometrl…ô", "B) Tachometrl…ô", "C) S√ºr…ôt √∂l√ß…ôn aparatla"],
                "dogru_cavab": "C) S√ºr…ôt √∂l√ß…ôn aparatla"
            },
            11: {
                "sual": "Elektrik c…ôr…ôyanƒ±nƒ±n √∂l√ß√º vahidi n…ôdir?",
                "cavablar": ["A) Volt", "B) Amper", "C) Ohm"],
                "dogru_cavab": "B) Amper"
            },
            12: {
                "sual": "Termometrl…ô √∂l√ß√ºl…ôn fiziki b√∂y√ºkl√ºk hansƒ±dƒ±r?",
                "cavablar": ["A) Sƒ±xlƒ±q", "B) Temperatur", "C) T…ôbii i≈üƒ±q"],
                "dogru_cavab": "B) Temperatur"
            },
            13: {
                "sual": "Bir cismin h…ôr…ôk…ôtinin d…ôyi≈üm…ôsi hansƒ± qanuna …ôsaslanƒ±r?",
                "cavablar": ["A) Newton-un ikinci qanunu", "B) Newton-un birinci qanunu", "C) Enerji qorunumu qanunu"],
                "dogru_cavab": "A) Newton-un ikinci qanunu"
            },
            14: {
                "sual": "Bir cism…ô t…ôtbiq edil…ôn q√ºvv…ô il…ô s√ºr…ôt arasƒ±ndakƒ± …ôlaq…ôni n…ô g√∂st…ôrir?",
                "cavablar": ["A) Kinetik enerji", "B) Newton-un birinci qanunu", "C) Newton-un ikinci qanunu"],
                "dogru_cavab": "C) Newton-un ikinci qanunu"
            },
            15: {
                "sual": "Bir madd…ô maye halda olduqda hansƒ± x√ºsusiyy…ôt…ô malikdir?",
                "cavablar": ["A) K√ºtl…ôsi sabitdir, amma ≈ü…ôkli d…ôyi≈üir", "B) H…ôcm v…ô ≈ü…ôkil d…ôyi≈üir",
                             "C) ≈û…ôkli d…ôyi≈üir, amma h…ôcmi sabitdir"],
                "dogru_cavab": "C) ≈û…ôkli d…ôyi≈üir, amma h…ôcmi sabitdir"
            }
        }
        self.control(self.fizika_suallari)
    def azerbaycan(self):
        print('#' * 50)
        print('--------------AZ∆èRBAYCAN-Dƒ∞Lƒ∞---------------')
        self.azerbaycan_dili_suallari = {
            1: {
                "sual": "Az…ôrbaycan dilind…ô …ôn √ßox istifad…ô olunan samit s…ôs hansƒ±dƒ±r?",
                "cavablar": ["A) M", "B) N", "C) S"],
                "dogru_cavab": "B) N"
            },
            2: {
                "sual": "Az…ôrbaycan dilind…ô ne√ß…ô sait s…ôs var?",
                "cavablar": ["A) 6", "B) 8", "C) 10"],
                "dogru_cavab": "A) 6"
            },
            3: {
                "sual": "∆èn √ßox istifad…ô olunan ≈ü…ôkil√ßil…ôr hansƒ±lardƒ±r?",
                "cavablar": ["A) Yekun ≈ü…ôkil√ßil…ôri", "B) Qo≈üulma ≈ü…ôkil√ßil…ôri", "C) Birl…ô≈üm…ô ≈ü…ôkil√ßil…ôri"],
                "dogru_cavab": "B) Qo≈üulma ≈ü…ôkil√ßil…ôri"
            },
            4: {
                "sual": "Az…ôrbaycan dilind…ô ne√ß…ô sif…ôt var?",
                "cavablar": ["A) 4", "B) 3", "C) 2"],
                "dogru_cavab": "A) 4"
            },
            5: {
                "sual": "S√∂z√ºn k√∂k√ºn√º tapƒ±n: 'yazƒ±lƒ±'",
                "cavablar": ["A) Yaz", "B) Yazi", "C) Yazƒ±"],
                "dogru_cavab": "A) Yaz"
            },
            6: {
                "sual": "Hansƒ± c√ºml…ô x…ôb…ôrsiz c√ºml…ôdir?",
                "cavablar": ["A) M…ôni g√∂r√ºb dur", "B) G…ôlir…ôm", "C) O m…ônim dostumdur"],
                "dogru_cavab": "C) O m…ônim dostumdur"
            },
            7: {
                "sual": "A≈üaƒüƒ±dakƒ±lardan hansƒ± ifad…ô k…ôlamdƒ±r?",
                "cavablar": ["A) M…ôn ev…ô gedir…ôm", "B) Ev…ô getdim", "C) Ev…ô ged…ôn", ],
                "dogru_cavab": "A) M…ôn ev…ô gedir…ôm"
            },
            8: {
                "sual": "Az…ôrbaycan dilind…ô hansƒ± n√∂v c√ºml…ô t…ôklif c√ºml…ôsidir?",
                "cavablar": ["A) S…ônin √º√ß√ºn yax≈üƒ± olacaq", "B) M…ôn d…ôrsl…ôri oxuyuram", "C) Bunu oxu"],
                "dogru_cavab": "C) Bunu oxu"
            },
            9: {
                "sual": "Az…ôrbaycan dilind…ô 'c…ôk' ≈ü…ôkil√ßisi hansƒ± m…ônanƒ± bildirir?",
                "cavablar": ["A) M…ôcburiyy…ôt", "B) H…ôr…ôk…ôt", "C) H…ôr…ôk…ôt etm…ôk"],
                "dogru_cavab": "A) M…ôcburiyy…ôt"
            },
            10: {
                "sual": "A≈üaƒüƒ±dakƒ±lardan hansƒ± s√∂z birl…ô≈üm…ôsidir?",
                "cavablar": ["A) B√∂y√ºk ev", "B) Evd…ô oturmaq", "C) Hava ≈ü…ôraiti"],
                "dogru_cavab": "A) B√∂y√ºk ev"
            },
            11: {
                "sual": "Az…ôrbaycan dilind…ô hansƒ± n√∂v feil…ô aid ≈ü…ôxs ≈ü…ôkil√ßisi yoxdur?",
                "cavablar": ["A) ƒ∞lk ≈ü…ôxs", "B) √ú√ß√ºnc√º ≈ü…ôxs", "C) D√∂rd√ºnc√º ≈ü…ôxs"],
                "dogru_cavab": "C) D√∂rd√ºnc√º ≈ü…ôxs"
            },
            12: {
                "sual": "Birl…ô≈üm…ô ≈ü…ôkil√ßisi n…ôyi bildirir?",
                "cavablar": ["A) H…ôr…ôk…ôt", "B) M…ôqs…ôd", "C) H…ôr…ôk…ôt v…ô s…ôb…ôb"],
                "dogru_cavab": "B) M…ôqs…ôd"
            },
            13: {
                "sual": "Az…ôrbaycan dilind…ô hansƒ± c√ºml…ô tamamlayƒ±cƒ±dƒ±r?",
                "cavablar": ["A) M…ôn s…ôni tanƒ±dƒ±m", "B) M…ôn d…ôrsl…ôrimi oxuyuram", "C) M…ôn ev…ô getdim"],
                "dogru_cavab": "B) M…ôn d…ôrsl…ôrimi oxuyuram"
            },
            14: {
                "sual": "Yuxarƒ±dakƒ± c√ºml…ônin hansƒ± n√∂v√º x…ôb…ôr c√ºml…ôsidir? 'O ev…ô gedir.'",
                "cavablar": ["A) M√ºst…ôqil", "B) ƒ∞stiqam…ôtli", "C) C√ºml…ô"],
                "dogru_cavab": "A) M√ºst…ôqil"
            },
            15: {
                "sual": "A≈üaƒüƒ±dakƒ±lardan hansƒ± c√ºml…ô sorƒüu c√ºml…ôsidir?",
                "cavablar": ["A) M…ôn h…ôr g√ºn kitab oxuyuram", "B) N…ô vaxt g…ôlirs…ôn?", "C) G…ôlm…ôliy…ôm"],
                "dogru_cavab": "B) N…ô vaxt g…ôlirs…ôn?"
            }
        }

        self.control(self.azerbaycan_dili_suallari)

    def cografiya(self):
        print('#' * 50)
        print('--------------COƒûRAFƒ∞A---------------')
        self.cografiya_suallari = {
            1: {
                "sual": "D√ºnyanƒ±n …ôn b√∂y√ºk okeanƒ± hansƒ±dƒ±r?",
                "cavablar": ["A) Atlantik Okeanƒ±", "B) Sakit Okean", "C) Hind Okeanƒ±"],
                "dogru_cavab": "B) Sakit Okean"
            },
            2: {
                "sual": "Az…ôrbaycanƒ±n paytaxtƒ± hansƒ± ≈ü…ôh…ôrdir?",
                "cavablar": ["A) G…ônc…ô", "B) Sumqayƒ±t", "C) Bakƒ±"],
                "dogru_cavab": "C) Bakƒ±"
            },
            3: {
                "sual": "Afrikanƒ±n …ôn b√∂y√ºk √∂lk…ôsi hansƒ±dƒ±r?",
                "cavablar": ["A) Misir", "B) Nigeriya", "C) Sudan"],
                "dogru_cavab": "B) Nigeriya"
            },
            4: {
                "sual": "D√ºnyada …ôn uzun √ßay hansƒ±dƒ±r?",
                "cavablar": ["A) Amazon", "B) Nil", "C) Yangtze"],
                "dogru_cavab": "B) Nil"
            },
            5: {
                "sual": "Hansƒ± √∂lk…ô Asiyanƒ±n …ôn b√∂y√ºk √∂lk…ôsidir?",
                "cavablar": ["A) √áin", "B) Hindistan", "C) Rusiya"],
                "dogru_cavab": "A) √áin"
            },
            6: {
                "sual": "T…ôbi…ôtd…ô 'Yaƒüƒ±≈ü me≈ü…ôsi' b√∂lg…ôsi harada yerl…ô≈üir?",
                "cavablar": ["A) Amazon", "B) S…ôhra", "C) Arktik"],
                "dogru_cavab": "A) Amazon"
            },
            7: {
                "sual": "ƒ∞qlim n√∂vl…ôrind…ôn hansƒ±dƒ±r subtropik iqlim…ô aiddir?",
                "cavablar": ["A) Ekvatordan yaxƒ±n", "B) Sahil zonalarƒ±", "C) H√ºnd√ºr daƒülar"],
                "dogru_cavab": "B) Sahil zonalarƒ±"
            },
            8: {
                "sual": "ƒ∞qliml…ôrd…ô …ôn √ßox rast g…ôlin…ôn atmosfer hadis…ôsi hansƒ±dƒ±r?",
                "cavablar": ["A) Qasƒ±rƒüa", "B) Yaƒüƒ±≈ü", "C) Qar"],
                "dogru_cavab": "B) Yaƒüƒ±≈ü"
            },
            9: {
                "sual": "√áin Xalq Respublikasƒ±nƒ±n …ôsas daƒü sistemi hansƒ±dƒ±r?",
                "cavablar": ["A) Himalay", "B) Altay", "C) Tien ≈ûan"],
                "dogru_cavab": "A) Himalay"
            },
            10: {
                "sual": "D√ºnyanƒ±n …ôn y√ºks…ôk daƒüƒ± hansƒ±dƒ±r?",
                "cavablar": ["A) K2", "B) Everest", "C) Makalu"],
                "dogru_cavab": "B) Everest"
            },
            11: {
                "sual": "Hansƒ± √ßay Afrikada yerl…ô≈üir?",
                "cavablar": ["A) Niger", "B) Nil", "C) Amazon"],
                "dogru_cavab": "B) Nil"
            },
            12: {
                "sual": "∆èn b√∂y√ºk adalar qrupunun adƒ± n…ôdir?",
                "cavablar": ["A) Maldiv adalarƒ±", "B) Japon adalarƒ±", "C) ƒ∞slandiya adalarƒ±"],
                "dogru_cavab": "B) Japon adalarƒ±"
            },
            13: {
                "sual": "≈ûimal yarƒ±mk√ºr…ôsind…ô yerl…ô≈ü…ôn √∂lk…ôl…ôrd…ôn hansƒ± …ôn √ßox ≈üimalda yerl…ô≈üir?",
                "cavablar": ["A) Kanada", "B) Rusya", "C) Finlandiya"],
                "dogru_cavab": "B) Rusya"
            },
            14: {
                "sual": "Hansƒ± √∂lk…ô Avstraliya il…ô …ôn yaxƒ±n qit…ôdir?",
                "cavablar": ["A) Hindistan", "B) √áili", "C) Yeni Zelandiya"],
                "dogru_cavab": "A) Hindistan"
            },
            15: {
                "sual": "S…ôhra iqlimi hansƒ± regionda yayƒ±lƒ±b?",
                "cavablar": ["A) Asiya", "B) Afrika", "C) Avstraliya"],
                "dogru_cavab": "B) Afrika"
            }
        }
        self.control(self.cografiya_suallari)

    def bialogiya(self):
        print('#' * 50)
        print('--------------Bƒ∞ALOGƒ∞YA---------------')
        self.biologiya_suallari = {
            1: {
                "sual": "ƒ∞nsan b…ôd…ônind…ôki …ôn b√∂y√ºk orqan hansƒ±dƒ±r?",
                "cavablar": ["A) √úr…ôk", "B) D…ôri", "C) Beyin"],
                "dogru_cavab": "B) D…ôri"
            },
            2: {
                "sual": "Fotosintez hansƒ± canlƒ±larda ba≈ü verir?",
                "cavablar": ["A) Heyvanlar", "B) Bitkil…ôr", "C) Mikroorqanizml…ôr"],
                "dogru_cavab": "B) Bitkil…ôr"
            },
            3: {
                "sual": "Mikroskopda g√∂r√ºnm…ôy…ôn canlƒ±lar hansƒ±lardƒ±r?",
                "cavablar": ["A) H√ºceyr…ôl…ôr", "B) Mikroorqanizml…ôr", "C) Bakteriyalar"],
                "dogru_cavab": "B) Mikroorqanizml…ôr"
            },
            4: {
                "sual": "H√ºceyr…ô n…ô il…ô …ôhat…ô olunur?",
                "cavablar": ["A) H√ºceyr…ô divarƒ±", "B) H√ºceyr…ô membranƒ±", "C) Yad cisiml…ôr"],
                "dogru_cavab": "B) H√ºceyr…ô membranƒ±"
            },
            5: {
                "sual": "Xlorofilin …ôsas funksiyasƒ± n…ôdir?",
                "cavablar": ["A) Yaradƒ±cƒ± enerji saxlamaq", "B) Fotosintez √º√ß√ºn i≈üƒ±q enerjisini udmaq",
                             "C) Oksigen istehsal etm…ôk"],
                "dogru_cavab": "B) Fotosintez √º√ß√ºn i≈üƒ±q enerjisini udmaq"
            },
            6: {
                "sual": "Hansƒ± orqanizm fotosintez prosesini h…ôyata ke√ßirir?",
                "cavablar": ["A) ƒ∞nsan", "B) Bitki", "C) Heyvan"],
                "dogru_cavab": "B) Bitki"
            },
            7: {
                "sual": "Qan d√∂vranƒ± hansƒ± orqan vasit…ôsil…ô h…ôyata ke√ßirilir?",
                "cavablar": ["A) Aƒüciy…ôr", "B) √úr…ôk", "C) Qaraciy…ôr"],
                "dogru_cavab": "B) √úr…ôk"
            },
            8: {
                "sual": "Aƒü qan h√ºceyr…ôl…ôrinin …ôsas funksiyasƒ± n…ôdir?",
                "cavablar": ["A) Oksigen da≈üƒ±maq", "B) ƒ∞mmunitet m√ºdafi…ôsi", "C) Qida emalƒ±"],
                "dogru_cavab": "B) ƒ∞mmunitet m√ºdafi…ôsi"
            },
            9: {
                "sual": "Hansƒ± orqanizm √∂z√ºn√º √ßoxalda bilm…ôz?",
                "cavablar": ["A) ƒ∞nsan", "B) Bakteriya", "C) Bitki"],
                "dogru_cavab": "A) ƒ∞nsan"
            },
            10: {
                "sual": "ƒ∞nsan b…ôd…ônind…ô D vitamini hansƒ± orqanda sintez olunur?",
                "cavablar": ["A) B√∂yr…ôkl…ôr", "B) D…ôri", "C) Qaraciy…ôr"],
                "dogru_cavab": "B) D…ôri"
            },
            11: {
                "sual": "Qan ≈ü…ôk…ôrinin n…ôzar…ôti il…ô m…ô≈üƒüul olan orqan hansƒ±dƒ±r?",
                "cavablar": ["A) B√∂yr…ôk", "B) Qaraciy…ôr", "C) Pankreas"],
                "dogru_cavab": "C) Pankreas"
            },
            12: {
                "sual": "∆èn √ßox yayƒ±lan qida madd…ôsi hansƒ±dƒ±r?",
                "cavablar": ["A) Z√ºlallar", "B) Karbohidratlar", "C) Yaƒülar"],
                "dogru_cavab": "B) Karbohidratlar"
            },
            13: {
                "sual": "Evolusiya n…ôz…ôriyy…ôsinin …ôsasƒ±nƒ± qoyan alim kimdir?",
                "cavablar": ["A) Charles Darwin", "B) Isaac Newton", "C) Albert Einstein"],
                "dogru_cavab": "A) Charles Darwin"
            },
            14: {
                "sual": "Hansƒ± h√ºceyr…ô tipi √ßoxalmadan …ôvv…ôl iki d…ôf…ô b√∂l√ºn√ºr?",
                "cavablar": ["A) Sperm h√ºceyr…ôsi", "B) Toxuma h√ºceyr…ôsi", "C) Yumurtalƒ±q h√ºceyr…ôsi"],
                "dogru_cavab": "A) Sperm h√ºceyr…ôsi"
            },
            15: {
                "sual": "Hansƒ± canlƒ±nƒ±n h…ôyatƒ± su altƒ±nda ba≈ü verir?",
                "cavablar": ["A) Balƒ±q", "B) Qartal", "C) Aslan"],
                "dogru_cavab": "A) Balƒ±q"
            }
        }
        self.control(self.biologiya_suallari)

    def tarix(self):
        print('#' * 50)
        print('--------------TARƒ∞X---------------')
        tarix_suallari = {
            1: {
                "sual": "Az…ôrbaycanƒ±n m√ºst…ôqilliyini elan etdiyi tarix hansƒ±dƒ±r?",
                "cavablar": ["A) 28 May 1918", "B) 30 Avqust 1991", "C) 12 Oktyabr 1920"],
                "dogru_cavab": "A) 28 May 1918"
            },
            2: {
                "sual": "M√ºasir d√∂vr√ºn ilk d√∂y√º≈ü t…ôyyar…ôsi hansƒ± √∂lk…ô t…ôr…ôfind…ôn istehsal olunmu≈üdur?",
                "cavablar": ["A) AB≈û", "B) Almaniya", "C) ƒ∞ngilt…ôr…ô"],
                "dogru_cavab": "A) AB≈û"
            },
            3: {
                "sual": "Az…ôrbaycanƒ±n …ôn b√∂y√ºk m√ºharib…ôsind…ô i≈ütirak etdiyi d√∂vr hansƒ±dƒ±r?",
                "cavablar": ["A) I D√ºnya M√ºharib…ôsi", "B) II D√ºnya M√ºharib…ôsi", "C) Qarabaƒü M√ºharib…ôsi"],
                "dogru_cavab": "B) II D√ºnya M√ºharib…ôsi"
            },
            4: {
                "sual": "C√ºmhuriyy…ôt d√∂vr√ºnd…ô Az…ôrbaycan Respublikasƒ±nƒ±n ilk ba≈ü naziri kim olmu≈üdur?",
                "cavablar": ["A) M…ôh…ômm…ôd ∆èmin R…ôsulzad…ô", "B) F…ôt…ôli Xan Xoyski", "C) N…ôsib b…ôy Yusifb…ôyli"],
                "dogru_cavab": "B) F…ôt…ôli Xan Xoyski"
            },
            5: {
                "sual": "D√ºnya tarixind…ô ilk d…ôf…ô olaraq parlamentli sistemin t…ôtbiq olunduƒüu √∂lk…ô hansƒ±dƒ±r?",
                "cavablar": ["A) AB≈û", "B) B√∂y√ºk Britaniya", "C) Fransa"],
                "dogru_cavab": "B) B√∂y√ºk Britaniya"
            },
            6: {
                "sual": "T√ºrkiy…ô Respublikasƒ± hansƒ± ild…ô qurulmu≈üdur?",
                "cavablar": ["A) 1920", "B) 1923", "C) 1919"],
                "dogru_cavab": "B) 1923"
            },
            7: {
                "sual": "M…ôƒülub olan ƒ∞spaniya, 1492-ci ild…ô hansƒ± …ôrazil…ôrini itirdi?",
                "cavablar": ["A) ≈ûimali Afrika", "B) Rusiya", "C) ƒ∞taliya"],
                "dogru_cavab": "A) ≈ûimali Afrika"
            },
            8: {
                "sual": "Rusiya imperatorluƒüunun ilk √ßarƒ±nƒ± kim olmu≈üdur?",
                "cavablar": ["A) ƒ∞van IV", "B) Peter I", "C) Yekaterina II"],
                "dogru_cavab": "A) ƒ∞van IV"
            },
            9: {
                "sual": "Roma ƒ∞mperiyasƒ±nƒ±n iki hiss…ôy…ô ayrƒ±lmasƒ± hansƒ± tarixd…ô ba≈ü vermi≈üdir?",
                "cavablar": ["A) 395", "B) 410", "C) 476"],
                "dogru_cavab": "A) 395"
            },
            10: {
                "sual": "Q…ôdim Misir m…ôd…ôniyy…ôtinin inki≈üaf etdiyi √ßay hansƒ± √ßaydƒ±r?",
                "cavablar": ["A) Nil", "B) Tigris", "C) Fƒ±rat"],
                "dogru_cavab": "A) Nil"
            },
            11: {
                "sual": "I D√ºnya M√ºharib…ôsinin ba≈ülandƒ±ƒüƒ± tarix hansƒ±dƒ±r?",
                "cavablar": ["A) 28 ƒ∞yun 1914", "B) 1 Sentyabr 1914", "C) 11 Noyabr 1918"],
                "dogru_cavab": "A) 28 ƒ∞yun 1914"
            },
            12: {
                "sual": "Napoleon Bonapartƒ±n r…ôhb…ôrlik etdiyi Fransa hansƒ± d√∂vrd…ô g√ºcl√º bir imperiya olmu≈üdur?",
                "cavablar": ["A) XVII …ôsr", "B) XVIII …ôsr", "C) XIX …ôsr"],
                "dogru_cavab": "C) XIX …ôsr"
            },
            13: {
                "sual": "Sovet ƒ∞ttifaqƒ±nƒ±n daƒüƒ±lmasƒ±nƒ±n r…ôsmi olaraq ba≈ü verdiyi il hansƒ±dƒ±r?",
                "cavablar": ["A) 1989", "B) 1991", "C) 1990"],
                "dogru_cavab": "B) 1991"
            },
            14: {
                "sual": "M√ºasir d√∂vr√ºn ilk m√ºst…ôqil d√∂vl…ôti hansƒ± olmu≈üdur?",
                "cavablar": ["A) AB≈û", "B) Fransƒ±z inqilabƒ±", "C) Bolqarƒ±stan"],
                "dogru_cavab": "A) AB≈û"
            },
            15: {
                "sual": "Az…ôrbaycanƒ±n Qarabaƒü b√∂lg…ôsi hansƒ± tarixi d√∂vrd…ô z…ôbt edilmi≈üdir?",
                "cavablar": ["A) 1990-cƒ± ill…ôr", "B) 1813-c√º il", "C) 1923-c√º il"],
                "dogru_cavab": "B) 1813-c√º il"
            }
        }
        self.control(self.cografiya_suallari)

    def edebiyyat(self):
        print('#' * 50)
        print('--------------∆èD∆èBƒ∞YYAT---------------')
        self.edebiyyat_suallari = {
            1: {
                "sual": "∆èd…ôbiyyatƒ±mƒ±zƒ±n ilk yazƒ±lƒ± abid…ôsi hansƒ±dƒ±r?",
                "cavablar": ["A) Kitabi-D…ôd…ô Qorqud", "B) D…ôd…ô Qorqud", "C) X…ôms…ô"],
                "dogru_cavab": "A) Kitabi-D…ôd…ô Qorqud"
            },
            2: {
                "sual": "∆ès…ôri 'F√ºzuli' t…ôr…ôfind…ôn yazƒ±lan 'Leyli v…ô Mecnun' hansƒ± d√∂vr…ô aiddir?",
                "cavablar": ["A) XVII …ôsr", "B) XV …ôsr", "C) XII …ôsr"],
                "dogru_cavab": "B) XV …ôsr"
            },
            3: {
                "sual": "Az…ôrbaycanƒ±n xalq ≈üairi, 'S…ônsiz' adlƒ± ≈üeirinin m√º…ôllifi kimdir?",
                "cavablar": ["A) Nizami G…ônc…ôvi", "B) M…ôh…ômm…ôd F√ºzuli", "C) Xur≈üidbanu Nat…ôvan"],
                "dogru_cavab": "C) Xur≈üidbanu Nat…ôvan"
            },
            4: {
                "sual": "Nizami G…ônc…ôvi hansƒ± janrda …ôs…ôrl…ôr yaratmƒ±≈üdƒ±r?",
                "cavablar": ["A) Dramanƒ±n janrƒ±nda", "B) Epik ≈üeird…ô", "C) Sonnetl…ôrin janrƒ±nda"],
                "dogru_cavab": "B) Epik ≈üeird…ô"
            },
            5: {
                "sual": "'K…ôbir' adlƒ± ≈üeiri il…ô tanƒ±nan v…ô h…ôm√ßinin 'Divan' adlƒ± …ôs…ôr yazmƒ±≈ü olan m…ô≈ühur ≈üair kimdir?",
                "cavablar": ["A) Nizami G…ônc…ôvi", "B) M…ôh…ômm…ôd F√ºzuli", "C) Mirz…ô F…ôt…ôli Axundov"],
                "dogru_cavab": "B) M…ôh…ômm…ôd F√ºzuli"
            },
            6: {
                "sual": "'V…ôt…ôn sevgisi' m√∂vzusunu …ôn √ßox i≈ül…ôy…ôn Az…ôrbaycan ≈üairi kimdir?",
                "cavablar": ["A) Mirz…ô F…ôt…ôli Axundov", "B) S…ôm…ôd Vurƒüun", "C) M…ômm…ôd Araz"],
                "dogru_cavab": "B) S…ôm…ôd Vurƒüun"
            },
            7: {
                "sual": "C√ºmhuriyy…ôt d√∂vr√ºn√ºn ilk dram …ôs…ôri hansƒ±dƒ±r?",
                "cavablar": ["A) M…ôh…ômm…ôd F√ºzuli ‚Äì 'Leyli v…ô Mecnun'", "B) Mirz…ô F…ôt…ôli Axundov ‚Äì 'Hekay…ô'",
                             "C) Cavid ‚Äì 'T…ônhalƒ±q'"],
                "dogru_cavab": "B) Mirz…ô F…ôt…ôli Axundov ‚Äì 'Hekay…ô'"
            },
            8: {
                "sual": "∆èd…ôbiyyatƒ±mƒ±zda ilk ≈üairl…ôrd…ôn biri olan 'Seyid Azim ≈ûirvani' hansƒ± janrda …ôs…ôrl…ôr yazmƒ±≈üdƒ±r?",
                "cavablar": ["A) Lirik ≈üeir", "B) F…ôls…ôfi ≈üeir", "C) Hekay…ô janrƒ±"],
                "dogru_cavab": "A) Lirik ≈üeir"
            },
            9: {
                "sual": "∆ès…ôrl…ôri il…ô h…ôm klassik, h…ôm d…ô m√ºasir d√∂vr√ºn ≈ü…ôxsiyy…ôtl…ôrin…ô t…ôsir etmi≈ü, '∆èsli v…ô K…ôr…ôm' dastanƒ±nƒ± yazan ≈ü…ôxs kimdir?",
                "cavablar": ["A) H√ºseyn Cavid", "B) Nizami G…ônc…ôvi", "C) F√ºzuli"],
                "dogru_cavab": "B) Nizami G…ônc…ôvi"
            },
            10: {
                "sual": "Az…ôrbaycanƒ±n …ôn b√∂y√ºk satirik ≈üairl…ôrind…ôn biri olan v…ô 'Hekay…ô' adlƒ± …ôs…ôrini yazan kimdir?",
                "cavablar": ["A) Mirz…ô F…ôt…ôli Axundov", "B) M…ôh…ômm…ôd F√ºzuli", "C) S…ôm…ôd Vurƒüun"],
                "dogru_cavab": "A) Mirz…ô F…ôt…ôli Axundov"
            },
            11: {
                "sual": "Az…ôrbaycan …ôd…ôbiyyatƒ±nda 'Qarabaƒü' m√∂vzusunu i≈ül…ôy…ôn ≈üair kimdir?",
                "cavablar": ["A) Nizami G…ônc…ôvi", "B) Xur≈üidbanu Nat…ôvan", "C) F√ºzuli"],
                "dogru_cavab": "B) Xur≈üidbanu Nat…ôvan"
            },
            12: {
                "sual": "Az…ôrbaycan …ôd…ôbiyyatƒ±nda 'ƒ∞ntibah' d√∂vr√ºn√º t…ômsil ed…ôn ≈üair kimdir?",
                "cavablar": ["A) S…ôm…ôd Vurƒüun", "B) M…ôh…ômm…ôd F√ºzuli", "C) Mirz…ô F…ôt…ôli Axundov"],
                "dogru_cavab": "C) Mirz…ô F…ôt…ôli Axundov"
            },
            13: {
                "sual": "Az…ôrbaycan …ôd…ôbiyyatƒ±nda 'X…ôms…ô' adlƒ± …ôs…ôri il…ô tanƒ±nan ≈üair kimdir?",
                "cavablar": ["A) Mirz…ô F…ôt…ôli Axundov", "B) M…ôh…ômm…ôd F√ºzuli", "C) Nizami G…ônc…ôvi"],
                "dogru_cavab": "C) Nizami G…ônc…ôvi"
            },
            14: {
                "sual": "Sovet d√∂n…ômind…ô Az…ôrbaycanƒ±n …ôn √ßox oxunan ≈üairi kimdir?",
                "cavablar": ["A) S…ôm…ôd Vurƒüun", "B) R…ôsul Rza", "C) Mikayƒ±l M√º≈üfiq"],
                "dogru_cavab": "A) S…ôm…ôd Vurƒüun"
            },
            15: {
                "sual": "Az…ôrbaycanƒ±n …ôn tanƒ±nmƒ±≈ü m√ºasir ≈üairl…ôrind…ôn biri olan v…ô 'Ya≈üamaq ist…ôyir…ôm' ≈üeirini yazan kimdir?",
                "cavablar": ["A) R…ôsul Rza", "B) Mikayƒ±l M√º≈üfiq", "C) B…ôxtiyar Vahabzad…ô"],
                "dogru_cavab": "C) B…ôxtiyar Vahabzad…ô"
            }
        }
        self.control(self.edebiyyat_suallari)

    def informatika(self):
        print('#' * 50)
        print('--------------ƒ∞NFORMATƒ∞KA---------------')
        self.informatika_suallari = {
            1: {
                "sual": "ƒ∞nformatikanƒ±n …ôsas m…ôqs…ôdi n…ôdir?",
                "cavablar": ["A) M…ôlumatlarƒ±n saxlanmasƒ± v…ô √∂t√ºr√ºlm…ôsi", "B) Komp√ºterl…ôri idar…ô etm…ôk",
                             "C) Veb s…ôhif…ô yaratmaq"],
                "dogru_cavab": "A) M…ôlumatlarƒ±n saxlanmasƒ± v…ô √∂t√ºr√ºlm…ôsi"
            },
            2: {
                "sual": "Komp√ºterin beyni sayƒ±lan vahid hansƒ±dƒ±r?",
                "cavablar": ["A) CPU", "B) RAM", "C) Hard disk"],
                "dogru_cavab": "A) CPU"
            },
            3: {
                "sual": "∆èn b√∂y√ºk m…ôlumat saxlama vahidi hansƒ±dƒ±r?",
                "cavablar": ["A) Byte", "B) Terabayt", "C) Gigabayt"],
                "dogru_cavab": "B) Terabayt"
            },
            4: {
                "sual": "A≈üaƒüƒ±dakƒ±lardan hansƒ± …ôm…ôliyyat sistemin…ô aiddir?",
                "cavablar": ["A) Microsoft Office", "B) Windows", "C) Photoshop"],
                "dogru_cavab": "B) Windows"
            },
            5: {
                "sual": "Bir faylƒ±n formatƒ±nƒ± d…ôyi≈üdirm…ôk √º√ß√ºn hansƒ± proqram t…ôminatƒ±ndan istifad…ô olunur?",
                "cavablar": ["A) Web browser", "B) Media player", "C) Konvertor proqramlarƒ±"],
                "dogru_cavab": "C) Konvertor proqramlarƒ±"
            },
            6: {
                "sual": "R…ôq…ômsal m…ôlumatlarƒ± ≈üifr…ôl…ôm…ôk √º√ß√ºn istifad…ô olunan √ºsul hansƒ±dƒ±r?",
                "cavablar": ["A) Kriptoqrafiya", "B) ≈û…ôb…ôk…ô analizi", "C) ≈û…ôkil redakt…ôsi"],
                "dogru_cavab": "A) Kriptoqrafiya"
            },
            7: {
                "sual": "ƒ∞nternetin …ôn geni≈ü istifad…ô olunan protokolu hansƒ±dƒ±r?",
                "cavablar": ["A) HTTP", "B) FTP", "C) TCP/IP"],
                "dogru_cavab": "C) TCP/IP"
            },
            8: {
                "sual": "Komp√ºterd…ô istifad…ô olunan operativ yadda≈üƒ±n adƒ± n…ôdir?",
                "cavablar": ["A) ROM", "B) RAM", "C) Cache"],
                "dogru_cavab": "B) RAM"
            },
            9: {
                "sual": "≈û…ôb…ôk…ô √ºz…ôrind…ôn m…ôlumat √∂t√ºr√ºlm…ôsini t…ômin ed…ôn al…ôt hansƒ±dƒ±r?",
                "cavablar": ["A) Router", "B) Printer", "C) Monitor"],
                "dogru_cavab": "A) Router"
            },
            10: {
                "sual": "Hansƒ± proqramla≈üdƒ±rma dili veb inki≈üafƒ±nda …ôn √ßox istifad…ô olunur?",
                "cavablar": ["A) C++", "B) JavaScript", "C) Python"],
                "dogru_cavab": "B) JavaScript"
            },
            11: {
                "sual": "A≈üaƒüƒ±dakƒ±lardan hansƒ± ≈ü…ôb…ôk…ô t…ôhl√ºk…ôsizliyin…ô aiddir?",
                "cavablar": ["A) Firewall", "B) Word processor", "C) File manager"],
                "dogru_cavab": "A) Firewall"
            },
            12: {
                "sual": "ƒ∞nternet √ºz…ôrind…ôn fayl m√ºbadil…ôsini t…ômin ed…ôn protokol hansƒ±dƒ±r?",
                "cavablar": ["A) FTP", "B) HTTP", "C) HTTPS"],
                "dogru_cavab": "A) FTP"
            },
            13: {
                "sual": "Microsoft Excel-d…ô hansƒ± …ôm…ôliyyat sistemi istifad…ô olunur?",
                "cavablar": ["A) ≈û…ôkil √ß…ôkm…ô", "B) C…ôdv…ôl yaratma", "C) Veril…ônl…ôr bazasƒ± yaratma"],
                "dogru_cavab": "B) C…ôdv…ôl yaratma"
            },
            14: {
                "sual": "Komp√ºterin xarici yadda≈üƒ±na n…ô daxildir?",
                "cavablar": ["A) CPU", "B) Monitor", "C) Hard disk"],
                "dogru_cavab": "C) Hard disk"
            },
            15: {
                "sual": "ƒ∞nformatika elmi hansƒ± sah…ôl…ôri …ôhat…ô edir?",
                "cavablar": ["A) Biologiya", "B) M…ôlumatlarƒ±n i≈ül…ônm…ôsi v…ô saxlanmasƒ±", "C) K…ônd t…ôs…ôrr√ºfatƒ±"],
                "dogru_cavab": "B) M…ôlumatlarƒ±n i≈ül…ônm…ôsi v…ô saxlanmasƒ±"
            }
        }
        self.control(self.informatika_suallari)

    def start(self):

        print("\n***ƒ∞MTAHANA*** Xos gelmisiniz!!")

        while True:
            self.secim = input("Zehmet olmasa qrupunuzu qeyd edin.")

            if self.secim.isdigit() and self.secim != "":
                if int(self.secim) >= 1 and int(self.secim) <= 5:

                    if self.secim == '1':
                        self.qrup_1()
                        break
                    elif self.secim == '2':
                        self.qrup_2()
                        break
                    elif self.secim == '3':
                        self.qrup_3()
                        break
                    elif self.secim == '4':
                        self.qrup_4()
                        break
                    elif self.secim == '5':
                        self.qrup_5()
                        break
                else:
                    print(f"{self.secim} d√ºzg√ºn se√ßim deyil")
                    print("Se√ßiminiz 1-d…ôn 5-…ô q…ôd…ôr olmalƒ±dƒ±r.")

            else:
                print(f"{self.secim} d√ºzg√ºn se√ßim deyil")
                print("Se√ßiminizi d√ºzg√ºn edin")

    def menu(self):
        while True:
            self.start = input('Yenid…ôn c…ôhd etm…ôk ist…ôrdinizmi? [-h…ô- enter, -yox- < Q > duym…ôsini basƒ±n!')
            if self.start.lower() == 'Q':
                print('\nSizinl…ô vaxt ke√ßirm…ôk √ßox xo≈ü oldu  Saƒüolun!!!')
                sys.exit()

            elif self.secim.strip() == '' or self.start.isdigit():

                print("\nXahi≈ü edir…ôm d√ºzg√ºn bir se√ßim daxil edin (bo≈ü v…ô ya r…ôq…ôm olmamalƒ±dƒ±r).")
            else:
                SualCavabOyunu()


ders = SualCavabOyunu()
