import sys


class SualCavabOyunu:
    def __init__(self):
        self.dogru_cavab = 0
        self.sef_cavab = 0
        self.cavab_bend = ['A', 'B', 'C']
        self.start()



    def qrup_1(self):
        print('*' * 50)
        print('1-ci qrup √ºzr…ô Fenler')
        print("""
        1.Kimya
        2.Riyaziyyat
        3.Fizika
        4.Xarici dil
        5.ƒ∞nformatika
        6.Az…ôrbaycan dili\n""")

        print('*' * 50)
        self.kimya()
        self.riaziyyat()
        self.fizika()
        self.azerbaycan()
        self.informatika()
        self.xarici_diller()

    def qrup_2(self):
        print('*' * 50)
        print('2-ci qrup √ºzr…ô Fenler')
        print("""
        1.Coƒürafiya
        2.Riyaziyyat
        3.Tarix
        4.Xarici dil
        5.Az…ôrbaycan dili\n""")
        print('*' * 50)
        self.cografiya()
        self.riaziyyat()
        self.tarix()
        self.azerbaycan()
        self.xarici_diller()

    def qrup_3(self):
        print('*' * 50)
        print('3-c√º qrup √ºzr…ô Fenler')
        print("""
        1.∆èd…ôbiyyat
        2.Riyaziyyat
        3.Tarix
        4.ƒ∞ngilis dili,
        5.Az…ôrbaycan dili\n""")
        print('*' * 50)
        self.edebiyyat()
        self.riaziyyat()
        self.tarix()
        self.azerbaycan()
        self.xarici_diller()

    def qrup_4(self):
        print('*' * 50)
        print('4-c√º qrup √ºzr…ô Fenler')
        print("""
        1.Kimya
        2.Riyaziyyat
        3.Fizika
        4.ƒ∞ngilis dili,
        5.Az…ôrbaycan dili
        6.Biologiya\n""")
        print('*' * 50)
        self.kimya()
        self.riaziyyat()
        self.fizika()
        self.azerbaycan()
        self.bialogiya()
        self.xarici_diller()

    def qrup_5(self):
        print('*' * 50)
        print('5-ci qrup √ºzr…ô Fenler')
        print("""
        1.Az…ôrbaycan dili
        2.Riyaziyyat
        3.Xarici dili\n""")
        print('*' * 50)
        self.azerbaycan()
        self.riaziyyat()
        self.xarici_diller()

    def xarici_diller(self):
        print("Orta Mektebde Hansi Xarici dil tedris olunub")
        print("""Ke√ßiril…ôn Xarici dili qeyd edin
        1.Alman
        2.Fransƒ±z
        3.Rus
        4.ƒ∞ngilis 
        Se√ßiminizi fenn √ºzre reqemle qeyd edin m…ôs: 1 d√ºym…ôsi Alman. 2 d√ºym…ôsi Fransƒ±z v…ô.s""")

        while True:
            self.dil_secimi = input('Dil se√ßiminƒ±n n√∂mr…ôsi: ')

            if self.dil_secimi.isdigit() and self.dil_secimi != "":
                if 1 <= int(self.dil_secimi) <= 4:
                    if self.dil_secimi == '1':
                        self.xarici_alman()
                        break

                    elif self.dil_secimi == '2':
                        self.xarici_fransiz()
                        break
                    elif self.dil_secimi == '3':
                        self.xarici_rus()
                        break
                    elif self.dil_secimi == '4':
                        self.xarici_ingilis()
                        break

                else:
                    print(f"{self.dil_secimi} d√ºzg√ºn se√ßim deyil. Se√ßiminiz 1-d…ôn 4-…ô q…ôd…ôr olmalƒ±dƒ±r.")
            else:
                print(f"{self.dil_secimi} d√ºzg√ºn se√ßim deyil. Se√ßiminizi d√ºzg√ºn edin.")






    def control(self,fenn):
        for k, v in fenn.items():
            print(f"Sual: {k} : {v['sual']}")
            print('Cavablar')
            for cavab in v['cavablar']:
                print(cavab)

            self.cavab_ver = input('Hansi dogru bendir: ').upper()
            while self.cavab_ver not in self.cavab_bend:
                print("Se√ßiminizi d√ºzg√ºn edin. Yalnƒ±z A, B v…ô ya C variantlarƒ±nƒ± se√ß…ô bil…ôrsiniz.")
                self.cavab_ver = input("Hansƒ±nƒ± doƒüru bilirsiniz? (A, B, C): ").upper()

            if self.cavab_ver == v['dogru_cavab'][0]:
                print("Doƒüru cavab! üòä Cavab:{}".format(v['dogru_cavab']))
                self.dogru_cavab += 1

            else:
                print(f"Sehv tapdiniz üòû. Dogru cavab: {v['dogru_cavab']}")
                self.sef_cavab += 1

            print('*' * 60)
        print(f"Doƒüru cavablarƒ±n sayƒ±: {self.dogru_cavab}")
        print(f"S…ôhv cavablarƒ±n sayƒ±: {self.sef_cavab}")
        self.kecid()

    def kecid(self):
        try:
            self.kecid_bal = (self.dogru_cavab * 5) - (self.sef_cavab * 2)
            print('Sizin ke√ßid balƒ±nƒ±z', self.kecid_bal)
            if self.kecid_bal >= 90:
                qiymet = 'A'
            elif self.kecid_bal >= 80:
                qiymet = 'B'
            elif self.kecid_bal >= 70:
                qiymet = 'C'
            elif self.kecid_bal >= 60:
                qiymet = 'D'
            else:
                qiymet = 'F'  # Ke√ßm…ôdikd…ô 'F' verilir

            print(f"√úmumi balƒ±nƒ±z: {self.kecid_bal} bal - Qiym…ôt: {qiymet}")
        except (ZeroDivisionError, OverflowError):
            print('Sizin s…ôhfiniz yoxdur')

    def xarici_rus(self):
        print('#' * 50)
        print('--------------RUS---------------')

        self.rus_dict_questions = {
            1: {
                "sual": "–°—Ç–æ–ª–∏—Ü–∞ –†–æ—Å—Å–∏–∏?",
                "cavablar": ["A) –ú–æ—Å–∫–≤–∞", "B) –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "C) –ö–∞–∑–∞–Ω—å"],
                "dogru_cavab": "A) –ú–æ—Å–∫–≤–∞"
            },
            2: {
                "sual": "–ö–∞–∫–æ–µ —Å–ª–æ–≤–æ —è–≤–ª—è–µ—Ç—Å—è –≥–ª–∞–≥–æ–ª–æ–º?",
                "cavablar": ["A) –ë–µ–≥–∞—Ç—å", "B) –ë—ã—Å—Ç—Ä–æ", "C) –£–º–Ω—ã–π"],
                "dogru_cavab": "A) –ë–µ–≥–∞—Ç—å"
            },
            3: {
                "sual": "–ö–∞–∫–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–¥–µ—Ç –ø–æ—Å–ª–µ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞?",
                "cavablar": ["A) –í—Ç–æ—Ä–Ω–∏–∫", "B) –°—Ä–µ–¥–∞", "C) –ß–µ—Ç–≤–µ—Ä–≥"],
                "dogru_cavab": "A) –í—Ç–æ—Ä–Ω–∏–∫"
            }

        }
        self.control(self.rus_dict_questions)
        self.menu()

    def xarici_fransiz(self):
        print('#' * 50)
        print('--------------FRANSIZ---------------')

        self.fransiz_dict_questions = {
            1: {
                "sual": "Quelle est la capitale de la France ?",
                "cavablar": ["A) Paris", "B) Marseille", "C) Lyon"],
                "dogru_cavab": "A) Paris"
            },
            2: {
                "sual": "Quel est le plus grand oc√©an du monde ?",
                "cavablar": ["A) Oc√©an Atlantique", "B) Oc√©an Pacifique", "C) Oc√©an Indien"],
                "dogru_cavab": "B) Oc√©an Pacifique"
            },
            3: {
                "sual": "Combien de mois dans une ann√©e ?",
                "cavablar": ["A) 10", "B) 12", "C) 14"],
                "dogru_cavab": "B) 12"
            }

        }
        self.control(self.fransiz_dict_questions)
        self.menu()

    def xarici_alman(self):
        print('#' * 50)
        print('--------------ALMAN---------------')
        self.alman_dict_questions = {
            1: {
                "sual": "Was ist die Hauptstadt von Deutschland?",
                "cavablar": ["A) Berlin", "B) M√ºnchen", "C) Frankfurt"],
                "dogru_cavab": "A) Berlin"
            },
            2: {
                "sual": "Welches ist der l√§ngste Fluss in Deutschland?",
                "cavablar": ["A) Rhein", "B) Elbe", "C) Donau"],
                "dogru_cavab": "A) Rhein"
            },
            3: {
                "sual": "Wie viele Bundesl√§nder gibt es in Deutschland?",
                "cavablar": ["A) 12", "B) 16", "C) 18"],
                "dogru_cavab": "B) 16"
            }

        }
        self.control(self.alman_dict_questions)
        self.menu()

    def xarici_ingilis(self):
        print('#' * 50)
        print('--------------ƒ∞NGƒ∞Lƒ∞S---------------')

        self.english_dict_questions_azerbaijani = {
            1: {
                "sual": "ƒ∞ngilt…ôr…ônin paytaxtƒ± hansƒ±dƒ±r?",
                "cavablar": ["A) London", "B) Paris", "C) Berlin"],
                "dogru_cavab": "A) London"
            },
            2: {
                "sual": "'Foot' s√∂z√ºn√ºn √ßoxluq formasƒ± n…ôdir?",
                "cavablar": ["A) Foots", "B) Feets", "C) Feet"],
                "dogru_cavab": "C) Feet"
            },
            3: {
                "sual": "A≈üaƒüƒ±dakilerden hansƒ±dƒ±r fel?",
                "cavablar": ["A) Run", "B) Happiness", "C) Quickly"],
                "dogru_cavab": "A) Run"
            }

        }

        self.control(self.english_dict_questions_azerbaijani)
        self.menu()



    def kimya(self):
        print('#' * 50)
        print('--------------Kƒ∞MYA---------------')
        self.kimya_suallari = {
            1: {
                "sual": "Kimyada atomlarƒ±n …ôn ki√ßik vahidi hansƒ± madd…ôy…ô aiddir?",
                "cavablar": ["A) Atom", "B) Molekul", "C) Ion"],
                "dogru_cavab": "A) Atom"
            },
            2: {
                "sual": "Hidrogenin kimy…ôvi simvolu hansƒ±dƒ±r?",
                "cavablar": ["A) H", "B) He", "C) O"],
                "dogru_cavab": "A) H"
            },
            3: {
                "sual": "Su molekulunun (H2O) t…ôrkibind…ô ne√ß…ô oksigen atomu vardƒ±r?",
                "cavablar": ["A) 1", "B) 2", "C) 3"],
                "dogru_cavab": "A) 1"
            }

        }

        self.control(self.kimya_suallari)

    def riaziyyat(self):
        print('#' * 50)
        print('--------------Rƒ∞AZƒ∞YYAT---------------')
        self.riyaziyyat_suallari = {
            1: {
                "sual": "Bir √º√ßbucaƒüƒ±n i√ß bucaqlarƒ±nƒ±n c…ômi n…ô q…ôd…ôrdir?",
                "cavablar": ["A) 180¬∞", "B) 360¬∞", "C) 90¬∞"],
                "dogru_cavab": "A) 180¬∞"
            },
            2: {
                "sual": "Bir …ôd…ôdi 7 il…ô b√∂l…ônd…ô qalan 3 qalƒ±rsa, h…ômin …ôd…ôdin b√∂l…ôni n…ôdir?",
                "cavablar": ["A) 7", "B) 3", "C) 6"],
                "dogru_cavab": "A) 7"
            },
            3: {
                "sual": "Bir d√ºzbucaqlƒ± √º√ßbucaƒüƒ±n hipotenuzasƒ±nƒ±n uzunluƒüu 10 sm, bir ayaƒüƒ±nƒ±n uzunluƒüu is…ô 6 sm-dir. ƒ∞kinci ayaƒüƒ±nƒ±n uzunluƒüunu tapƒ±n.",
                "cavablar": ["A) 8 sm", "B) 7 sm", "C) 9 sm"],
                "dogru_cavab": "B) 8 sm"
            }

        }

        self.control(self.riyaziyyat_suallari)

    def fizika(self):
        print('#' * 50)
        print('--------------Fƒ∞Zƒ∞KA---------------')
        self.fizika_suallari = {
            1: {
                "sual": "H…ôr…ôk…ôt n…ôdir?",
                "cavablar": ["A) Cismin zamanla yer d…ôyi≈üm…ôsi", "B) Cismin s√ºr…ôtinin d…ôyi≈üm…ôsi",
                             "C) Cismin k√ºtl…ôsinin d…ôyi≈üm…ôsi"],
                "dogru_cavab": "A) Cismin zamanla yer d…ôyi≈üm…ôsi"
            },
            2: {
                "sual": "Newton-un birinci qanunu n…ôyi izah edir?",
                "cavablar": ["A) Q√ºvv…ô olmadan h…ôr…ôk…ôt ed…ôn cism sabit s√ºr…ôtini saxlayƒ±r",
                             "B) Q√ºvv…ô h…ôr…ôk…ôt ed…ôn cismi dayandƒ±rƒ±r", "C) Cismin h…ôr…ôk…ôtini yalnƒ±z s√ºr…ôt t…ôsir edir"],
                "dogru_cavab": "A) Q√ºvv…ô olmadan h…ôr…ôk…ôt ed…ôn cism sabit s√ºr…ôtini saxlayƒ±r"
            },
            3: {
                "sual": "Kinetik enerji nec…ô hesablanƒ±r?",
                "cavablar": ["A) E_k = m * v", "B) E_k = 1/2 * m * v^2", "C) E_k = m * g * h"],
                "dogru_cavab": "B) E_k = 1/2 * m * v^2"
            }

        }
        self.control(self.fizika_suallari)
    def azerbaycan(self):
        print('#' * 50)
        print('--------------AZ∆èRBAYCAN-Dƒ∞Lƒ∞---------------')
        self.azerbaycan_dili_suallari = {
            1: {
                "sual": "Az…ôrbaycan dilind…ô …ôn √ßox istifad…ô olunan samit s…ôs hansƒ±dƒ±r?",
                "cavablar": ["A) M", "B) N", "C) S"],
                "dogru_cavab": "B) N"
            },
            2: {
                "sual": "Az…ôrbaycan dilind…ô ne√ß…ô sait s…ôs var?",
                "cavablar": ["A) 6", "B) 8", "C) 10"],
                "dogru_cavab": "A) 6"
            },
            3: {
                "sual": "∆èn √ßox istifad…ô olunan ≈ü…ôkil√ßil…ôr hansƒ±lardƒ±r?",
                "cavablar": ["A) Yekun ≈ü…ôkil√ßil…ôri", "B) Qo≈üulma ≈ü…ôkil√ßil…ôri", "C) Birl…ô≈üm…ô ≈ü…ôkil√ßil…ôri"],
                "dogru_cavab": "B) Qo≈üulma ≈ü…ôkil√ßil…ôri"
            }

        }

        self.control(self.azerbaycan_dili_suallari)

    def cografiya(self):
        print('#' * 50)
        print('--------------COƒûRAFƒ∞A---------------')
        self.cografiya_suallari = {
            1: {
                "sual": "D√ºnyanƒ±n …ôn b√∂y√ºk okeanƒ± hansƒ±dƒ±r?",
                "cavablar": ["A) Atlantik Okeanƒ±", "B) Sakit Okean", "C) Hind Okeanƒ±"],
                "dogru_cavab": "B) Sakit Okean"
            },
            2: {
                "sual": "Az…ôrbaycanƒ±n paytaxtƒ± hansƒ± ≈ü…ôh…ôrdir?",
                "cavablar": ["A) G…ônc…ô", "B) Sumqayƒ±t", "C) Bakƒ±"],
                "dogru_cavab": "C) Bakƒ±"
            },
            3: {
                "sual": "Afrikanƒ±n …ôn b√∂y√ºk √∂lk…ôsi hansƒ±dƒ±r?",
                "cavablar": ["A) Misir", "B) Nigeriya", "C) Sudan"],
                "dogru_cavab": "B) Nigeriya"
            }

        }
        self.control(self.cografiya_suallari)

    def bialogiya(self):
        print('#' * 50)
        print('--------------Bƒ∞ALOGƒ∞YA---------------')
        self.biologiya_suallari = {
            1: {
                "sual": "ƒ∞nsan b…ôd…ônind…ôki …ôn b√∂y√ºk orqan hansƒ±dƒ±r?",
                "cavablar": ["A) √úr…ôk", "B) D…ôri", "C) Beyin"],
                "dogru_cavab": "B) D…ôri"
            },
            2: {
                "sual": "Fotosintez hansƒ± canlƒ±larda ba≈ü verir?",
                "cavablar": ["A) Heyvanlar", "B) Bitkil…ôr", "C) Mikroorqanizml…ôr"],
                "dogru_cavab": "B) Bitkil…ôr"
            },
            3: {
                "sual": "Mikroskopda g√∂r√ºnm…ôy…ôn canlƒ±lar hansƒ±lardƒ±r?",
                "cavablar": ["A) H√ºceyr…ôl…ôr", "B) Mikroorqanizml…ôr", "C) Bakteriyalar"],
                "dogru_cavab": "B) Mikroorqanizml…ôr"
            }

        }
        self.control(self.biologiya_suallari)

    def tarix(self):
        print('#' * 50)
        print('--------------TARƒ∞X---------------')
        tarix_suallari = {
            1: {
                "sual": "Az…ôrbaycanƒ±n m√ºst…ôqilliyini elan etdiyi tarix hansƒ±dƒ±r?",
                "cavablar": ["A) 28 May 1918", "B) 30 Avqust 1991", "C) 12 Oktyabr 1920"],
                "dogru_cavab": "A) 28 May 1918"
            },
            2: {
                "sual": "M√ºasir d√∂vr√ºn ilk d√∂y√º≈ü t…ôyyar…ôsi hansƒ± √∂lk…ô t…ôr…ôfind…ôn istehsal olunmu≈üdur?",
                "cavablar": ["A) AB≈û", "B) Almaniya", "C) ƒ∞ngilt…ôr…ô"],
                "dogru_cavab": "A) AB≈û"
            },
            3: {
                "sual": "Az…ôrbaycanƒ±n …ôn b√∂y√ºk m√ºharib…ôsind…ô i≈ütirak etdiyi d√∂vr hansƒ±dƒ±r?",
                "cavablar": ["A) I D√ºnya M√ºharib…ôsi", "B) II D√ºnya M√ºharib…ôsi", "C) Qarabaƒü M√ºharib…ôsi"],
                "dogru_cavab": "B) II D√ºnya M√ºharib…ôsi"
            }

        }
        self.control(self.cografiya_suallari)

    def edebiyyat(self):
        print('#' * 50)
        print('--------------∆èD∆èBƒ∞YYAT---------------')
        self.edebiyyat_suallari = {
            1: {
                "sual": "∆èd…ôbiyyatƒ±mƒ±zƒ±n ilk yazƒ±lƒ± abid…ôsi hansƒ±dƒ±r?",
                "cavablar": ["A) Kitabi-D…ôd…ô Qorqud", "B) D…ôd…ô Qorqud", "C) X…ôms…ô"],
                "dogru_cavab": "A) Kitabi-D…ôd…ô Qorqud"
            },
            2: {
                "sual": "∆ès…ôri 'F√ºzuli' t…ôr…ôfind…ôn yazƒ±lan 'Leyli v…ô Mecnun' hansƒ± d√∂vr…ô aiddir?",
                "cavablar": ["A) XVII …ôsr", "B) XV …ôsr", "C) XII …ôsr"],
                "dogru_cavab": "B) XV …ôsr"
            },
            3: {
                "sual": "Az…ôrbaycanƒ±n xalq ≈üairi, 'S…ônsiz' adlƒ± ≈üeirinin m√º…ôllifi kimdir?",
                "cavablar": ["A) Nizami G…ônc…ôvi", "B) M…ôh…ômm…ôd F√ºzuli", "C) Xur≈üidbanu Nat…ôvan"],
                "dogru_cavab": "C) Xur≈üidbanu Nat…ôvan"
            }

        }
        self.control(self.edebiyyat_suallari)

    def informatika(self):
        print('#' * 50)
        print('--------------ƒ∞NFORMATƒ∞KA---------------')
        self.informatika_suallari = {
            1: {
                "sual": "ƒ∞nformatikanƒ±n …ôsas m…ôqs…ôdi n…ôdir?",
                "cavablar": ["A) M…ôlumatlarƒ±n saxlanmasƒ± v…ô √∂t√ºr√ºlm…ôsi", "B) Komp√ºterl…ôri idar…ô etm…ôk",
                             "C) Veb s…ôhif…ô yaratmaq"],
                "dogru_cavab": "A) M…ôlumatlarƒ±n saxlanmasƒ± v…ô √∂t√ºr√ºlm…ôsi"
            },
            2: {
                "sual": "Komp√ºterin beyni sayƒ±lan vahid hansƒ±dƒ±r?",
                "cavablar": ["A) CPU", "B) RAM", "C) Hard disk"],
                "dogru_cavab": "A) CPU"
            },
            3: {
                "sual": "∆èn b√∂y√ºk m…ôlumat saxlama vahidi hansƒ±dƒ±r?",
                "cavablar": ["A) Byte", "B) Terabayt", "C) Gigabayt"],
                "dogru_cavab": "B) Terabayt"
            }

        }
        self.control(self.informatika_suallari)


    def start(self):

        print("\n***ƒ∞MTAHANA*** Xos gelmisiniz!!")

        while True:
            self.secim = input("Zehmet olmasa qrupunuzu qeyd edin.")

            if self.secim.isdigit() and self.secim != "":
                if int(self.secim) >= 1 and int(self.secim) <= 5:

                    if self.secim == '1':
                        self.qrup_1()
                        break
                    elif self.secim == '2':
                        self.qrup_2()
                        break
                    elif self.secim == '3':
                        self.qrup_3()
                        break
                    elif self.secim == '4':
                        self.qrup_4()
                        break
                    elif self.secim == '5':
                        self.qrup_5()
                        break
                else:
                    print(f"{self.secim} d√ºzg√ºn se√ßim deyil")
                    print("Se√ßiminiz 1-d…ôn 5-…ô q…ôd…ôr olmalƒ±dƒ±r.")

            else:
                print(f"{self.secim} d√ºzg√ºn se√ßim deyil")
                print("Se√ßiminizi d√ºzg√ºn edin")

    def menu(self):
        while True:
            self.start = input('Yenid…ôn c…ôhd etm…ôk ist…ôrdinizmi? [-h…ô- enter, -yox- < Q > duym…ôsini basƒ±n!')
            if self.start.lower() == 'Q' :
                print('\nSizinl…ô vaxt ke√ßirm…ôk √ßox xo≈ü oldu  Saƒüolun!!!')
                sys.exit()

            elif self.secim.strip() == '' or self.start.isdigit():

                print("\nXahi≈ü edir…ôm d√ºzg√ºn bir se√ßim daxil edin (bo≈ü v…ô ya r…ôq…ôm olmamalƒ±dƒ±r).")
            else:
                SualCavabOyunu()


ders = SualCavabOyunu()
